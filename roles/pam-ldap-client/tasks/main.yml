---
# MIT License

# Copyright (c) 2018 

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# tasks file for pam-ldap-client

- name: Install packages
  ansible.builtin.apt:
    name: ldap-utils
    state: present

- name: Create directories to store certificates and keys
  ansible.builtin.file:
    path: "{{ item }}"
    group: "root"
    state: "directory"
    mode: "755"
    owner: "root"
  loop:
    - "{{ files_dir }}"
    - "{{ CA.ca_cert_file | dirname }}"

- name: copy neccesary certificates and keys
  ansible.builtin.copy:
    dest: "{{ item }}"
    src: "{{ item }}"
    mode: "644"
    owner: "root"
    group: "root"
  loop:
    - "{{ CA.ca_cert_file }}"

- name: Configure this host as ldap client
  ansible.builtin.lineinfile:
      path: /etc/hosts
      state: present
      line: "{{ ldap_server_ip }} {{ ldap_server_domain }}"

- name: Configure ldap client
  ansible.builtin.lineinfile:
      path: /etc/ldap/ldap.conf
      state: present
      line: "{{ item }}"
  loop:
  - "TLS_CACERT {{ CA.ca_cert_file }}"
  - "TLS_REQ_CERT never"
  - "BASE {{ ldap_base_dn }}"
  - "URI ldaps://{{ ldap_server_domain }}"

#see debconf properties
# # cd /tmp && apt-get download libpam-ldap libnss-ldap
# Get:1 http://deb.debian.org/debian stretch/main amd64 libnss-ldap amd64 265-5 [115 kB]
# Get:2 http://deb.debian.org/debian stretch/main amd64 libpam-ldap amd64 186-4 [87.0 kB]
# # ar x libnss-ldap_265-5_amd64.deb
# # tar xvf control.tar.gz
# grep -e "^Template:" -e "^Type: " -e "^Default: " -e "^Description: " templates  | \
#    sed -e "s/Template/  - question/" -e "s/^Type/    type/" -e "s/^Default/    value/" -e "s/^Description: \(.*$\)/    description: \"\1\"/"
# - question: libnss-ldap/confperm
#   type: boolean
#   value: false
#   description: "Make the configuration file readable/writeable by its owner only?"
# - question: libnss-ldap/nsswitch
#   type: note
#   description: "nsswitch.conf not managed automatically"
# - question: shared/ldapns/base-dn
#   type: string
#   value: dc=example,dc=net
#   description: "Distinguished name of the search base:"
# - question: libnss-ldap/dblogin
#   type: boolean
#   value: false
#   description: "Does the LDAP database require login?"
# - question: libnss-ldap/override
#   type: boolean
#   value: true
#   description: "Automatically update libnss-ldap's configuration file?"
# - question: libnss-ldap/binddn
#   type: string
#   value: cn=proxyuser,dc=example,dc=net
#   description: "Unprivileged database user:"
# - question: libnss-ldap/bindpw
#   type: password
#   description: "Password for database login account:"
# - question: shared/ldapns/ldap_version
#   type: select
#   value: 3
#   description: "LDAP version to use:"
# - question: shared/ldapns/ldap-server
#   type: string
#   value: ldap://127.0.0.1/
#   description: "LDAP server Uniform Resource Identifier:"
# - question: libnss-ldap/dbrootlogin
#   type: boolean
#   value: true
#   description: "Special LDAP privileges for root?"
# - question: libnss-ldap/rootbinddn
#   type: string
#   value: cn=manager,dc=example,dc=net
#   description: "LDAP account for root:"
# - question: libnss-ldap/rootbindpw
#   type: password
#   description: "LDAP root account password:"

- name: Preconfigure package libnss-ldap
  ansible.builtin.debconf:
      name: libnss-ldap 
      value: "{{ item.value }}"
      vtype: "{{ item.type }}"
      question: "{{ item.question }}"
  loop:
  - question: libnss-ldap/confperm
    type: boolean
    value: false
    description: "Make the configuration file readable/writeable by its owner only?"
  - question: libnss-ldap/nsswitch
    type: note
    value: ""
    description: "nsswitch.conf not managed automatically"
  - question: shared/ldapns/base-dn
    type: string
    value: "{{ ldap_base_dn }}"
    description: "Distinguished name of the search base:"
  - question: libnss-ldap/dblogin
    type: boolean
    value: false
    description: "Does the LDAP database require login?"
  - question: libnss-ldap/override
    type: boolean
    value: true
    description: "Automatically update libnss-ldap's configuration file?"
  - question: libnss-ldap/binddn
    type: string
    value: "cn=admin,{{ ldap_base_dn }}"
    description: "Unprivileged database user:"
  - question: libnss-ldap/bindpw
    type: password
    value: "{{ ldap_admin_pw }}"
    description: "Password for database login account:"
  - question: shared/ldapns/ldap_version
    type: select
    value: 3
    description: "LDAP version to use:"
  - question: shared/ldapns/ldap-server
    type: string
    value: "ldaps://{{ ldap_server_domain }}/"
    description: "LDAP server Uniform Resource Identifier:"
  - question: libnss-ldap/dbrootlogin
    type: boolean
    value: true
    description: "Special LDAP privileges for root?"
  - question: libnss-ldap/rootbinddn
    type: string
    value: "cn=admin,{{ ldap_base_dn }}"
    description: "LDAP account for root:"
  - question: libnss-ldap/rootbindpw
    type: password
    value: "{{ ldap_admin_pw }}"
    description: "LDAP root account password:"

# To see questions do the same that was done for the previous one
- name: Preconfigure package libpam-ldap
  ansible.builtin.debconf:
      name: libpam-ldap 
      value: "{{ item.value }}"
      vtype: "{{ item.type }}"
      question: "{{ item.question }}"
  loop:
  - question: libpam-ldap/rootbinddn
    type: string
    value: "cn=admin,{{ ldap_base_dn }}"
    description: "LDAP administrative account:"
  - question: libpam-ldap/rootbindpw
    type: password
    value: "{{ ldap_admin_pw }}"
    description: "LDAP administrative password:"
  - question: libpam-ldap/dblogin
    type: boolean
    value: false
    description: "Does the LDAP database require login?"
  - question: shared/ldapns/base-dn
    type: string
    value: "{{ ldap_base_dn }}"
    description: "Distinguished name of the search base:"
  - question: libpam-ldap/pam_password
    type: select
    value: crypt
    description: "Local encryption algorithm to use for passwords:"
  - question: shared/ldapns/ldap_version
    type: select
    value: 3
    description: "LDAP version to use:"
  - question: libpam-ldap/binddn
    type: string
    value: "cn=admin,{{ ldap_base_dn }}"
    description: "LDAP login user account:"
  - question: libpam-ldap/dbrootlogin
    type: boolean
    value: true
    description: "Allow LDAP admin account to behave like local root?"
  - question: shared/ldapns/ldap-server
    type: string
    value: "ldaps://{{ ldap_server_domain }}/"
    description: "LDAP server URI:"
  - question: libpam-ldap/bindpw
    type: password
    value: "{{ ldap_admin_pw }}"
    description: "Password for LDAP login user:"
  - question: libpam-ldap/override
    type: boolean
    value: true
    description: "Manage libpam-ldap configuration automatically?"

- name: Install packages
  ansible.builtin.apt:
    name: ["libnss-ldap", "libpam-ldap"]
    state: present

- name: configure nsswitch-ldap
  ansible.builtin.lineinfile:
      path: "/etc/nsswitch.conf"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      state: present
  loop:
    - line: 'passwd:         files ldap'
      regexp: '^passwd'
    - line: 'group:          files ldap'
      regexp: '^group'
    - line: 'shadow:         files ldap'
      regexp: '^shadow'
    - line: 'gshadow:        files ldap'
      regexp: '^gshadow'
    - line: 'hosts:          files ldap dns'
      regexp: '^hosts'
    - line: 'networks:       files ldap'
      regexp: '^networks'


# see https://docs.cumulusnetworks.com/download/attachments/8362556/kb_debconf.txt?version=1&modificationDate=1537401093000&api=v2
- name: Reconfigure package libpam-runtime
  ansible.builtin.debconf:
      name: libpam-runtime
      value: "{{ item.value }}"
      vtype: "{{ item.type }}"
      question: "{{ item.question }}"
  loop:
  - question: libpam-runtime/title
    type: title
    description: "PAM configuration"
    value: ""
  - question: libpam-runtime/profiles
    type: multiselect
    description: "PAM profiles to enable:"
    value: 
  - question: libpam-runtime/conflicts
    type: error
    description: "Incompatible PAM profiles selected."
    value: "unix, ldap, mkhomedir" #ccreds-save, unix, ldap, mkhomedir , ccreds-check
  - question: libpam-runtime/override
    type: boolean
    value: false
    description: "Override local changes to /etc/pam.d/common-*?"
  - question: libpam-runtime/no_profiles_chosen
    type: error
    value: ""
    description: "No PAM profiles have been selected."

- name: Invoke dpkg-reconfigure to reconfigure libpam-runtime
  ansible.builtin.shell: dpkg-reconfigure  --frontend noninteractive  libpam-runtime

- name: ensure mkhomedir module is present in /etc/pam.d/common-session
  ansible.builtin.lineinfile:
    dest: /etc/pam.d/{{ item }}
    line: session optional pam_mkhomedir.so skel=/etc/skel umask=077
    regexp: ^session\s+required\s+pam_mkhomedir.so.*$
    state: present
  with_items:
    - common-session
    - common-session-noninteractive 